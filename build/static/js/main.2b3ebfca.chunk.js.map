{"version":3,"sources":["components/Header/index.tsx","components/Footer/index.tsx","pages/Layout.tsx","utilities/history.ts","services/users.service.ts","components/Error/index.tsx","utilities/validationSchemas.ts","components/Registration/Form/index.tsx","store/Registration/actions.ts","store/Registration/types.ts","pages/Registration.tsx","components/Login/Form/index.tsx","store/Login/actions.ts","store/Login/types.ts","pages/Login.tsx","store/PasswordForgotten/actions.ts","store/PasswordForgotten/types.ts","components/PasswordForgotten/Form/index.tsx","pages/PasswordForgotten.tsx","components/RessetPassword/Form/index.tsx","store/ResetPassword/actions.ts","store/ResetPassword/types.ts","pages/ResetPassword.tsx","components/PasswordForgotten/Form/confirmationForm.tsx","pages/confirmationFormPage.tsx","utilities/ReducerHelper.ts","store/Login/reducer.ts","store/PasswordForgotten/reducer.ts","store/Registration/reducer.ts","store/ResetPassword/reducer.ts","configureStore.ts","utilities/localStorage.ts","store/index.ts","components/Profile/profile.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","eventKey","Footer","Layout","children","Container","Row","style","marginTop","Col","md","span","offset","history","createBrowserHistory","endPoint","headersOptions","headers","userService","email","password","params","URLSearchParams","console","log","append","axios","post","user","username","undefined","age","toString","confirmationCoode","Error","touched","message","validEmail","Yup","max","required","validPassword","min","validConfirmationCode","test","t","length","positive","validUsername","loginValidationSchema","shape","PassordForgottenValidationSchema","confirmationCodeFormSchema","confirmationCode","resetPasswordSchema","password1","oneOf","registrationSchema","RegistrationPage","handleSubmit","values","setSubmitting","resetForm","props","signin","render","initialValues","onSubmit","validationSchema","errors","handleBlur","handleChange","isSubmitting","Form","error","Alert","Group","controlId","icon","faUser","Control","size","type","placeholder","value","onBlur","onChange","name","faEnvelope","faLock","Check","label","Button","disabled","isLoading","Spinner","as","animation","role","aria-hidden","Component","mapActionsToProps","dispatch","credentials","action","then","u","successMsg","data","push","catch","err","errorMsg","connect","register","Registration","LoginPage","login","displayAlert","isLoggedIn","token","userLoginSuccess","userInfo","Login","PasswordForgotten","PasswordForgottenSuccess","successMessage","PasswordForgottenError","passwordForgotten","match","mapDispatchToProps","ResetPassword","resetPassword","ConfirmationForm","faKey","ConfirmationFormPage","createReducer","_state","handlers","isNil","isObject","some","keys","key","state","handler","initialState","LOGIN_HANDLERS","payload","LoginReducer","PQSSWORD_FORGOTTEN_HANDLERS","PasswordForgottenReducer","REGISTER_HANDLERS","SignupReducer","PWDCHANGE_HANDLERS","resetPasswordReducer","configureStore","savedState","serializedState","localStorage","getItem","JSON","parse","LoadState","store","createStore","combineReducers","router","connectRouter","RootReducer","composeWithDevTools","applyMiddleware","thunk","subscribe","stringify","setItem","SaveState","getState","Profile","App","path","exact","component","ForgottenPassord","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b3ebfca.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\n\nexport const Header = () => (<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n<Navbar.Brand href=\"\">Workers</Navbar.Brand>\n<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n<Navbar.Collapse id=\"responsive-navbar-nav\">\n  <Nav className=\"mr-auto\">\n    <Nav.Link href=\"#features\"></Nav.Link>\n    <Nav.Link href=\"#pricing\"></Nav.Link>\n    \n  </Nav>\n  <Nav>\n    <Nav.Link href=\"/login\">Sign In</Nav.Link>\n    <Nav.Link eventKey={2} href=\"/register\">\n      Sign Up\n    </Nav.Link>\n  </Nav>\n</Navbar.Collapse>\n</Navbar>\n)","import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\n\nexport const Footer: React.FC = () => (<Navbar collapseOnSelect className=\"fixed-bottom\" expand=\"lg\" bg=\"dark\" variant=\"dark\">\n\n<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n<Navbar.Collapse id=\"responsive-navbar-nav\" className=\"text-white\">\n  All rights are reserved\n</Navbar.Collapse>\n</Navbar>\n)","import React, { ReactNode } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Header } from '../components/Header';\nimport { Footer } from '../components/Footer';\n\ntype Props = {\n  children: ReactNode\n}\n\nconst Layout: React.SFC<Props> = ({ children }) => (\n    <div>\n<Header/>\n\t<Container>\n        \n        <Row style={{ marginTop : '100px' }}>\n            <Col md={{ span: 4, offset: 4 }}>\n                { children }\n            </Col>\n        </Row>\n    </Container>\n    <Footer/>\n    </div>\n);\n\nexport default Layout;\n","import { createBrowserHistory } from \"history\";\n\n\nexport const history = createBrowserHistory();","import axios from 'axios'\nimport { ICredentials } from '../store/Registration/types';\n\nconst endPoint: string = 'http://localhost:3005/users/';\nconst headersOptions: {} = { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } };\n \nconst login = (email: string, password: string) => {\n    let params = new URLSearchParams();\n    console.log('login');\n    params.append('email', email );\n    params.append('password', password );\n    return axios.post(endPoint+'signin', params, headersOptions);\n};\n\nconst signUp = (user:ICredentials) => {\n    let params = new URLSearchParams();\n    params.append('email', user.email );\n    params.append('username', user.username );\n    params.append('password', user.password === undefined ? '' : user.password  );\n    params.append('age', user.age === undefined ? '0' : user.age.toString()  );\n    return axios.post('http://localhost:3005/users/signup', params);\n};\n\n\n\nconst passwordForgotten = (email: string,confirmationCoode: string = '') => {\n    let params = new URLSearchParams();\n    params.append('email', email );\n    params.append('confirmationCode',confirmationCoode);\n    return axios.post(endPoint+'passwordForgotten', params,headersOptions);\n} \n\n\nconst resetPassword = (email: string,confirmationCoode: string, password: string) => {\n\n    console.log('resetPassword');\n    console.log(email);\n    console.log(confirmationCoode);\n    console.log(password);\n    let params = new URLSearchParams();\n    params.append('email', email );\n    params.append('confirmationCode',confirmationCoode);\n    params.append('password',password);\n\n\n    return axios.post(endPoint+'resetPassword', params, headersOptions);\n} \n\n\nexport const userService = {\n    login,\n    signUp,\n    passwordForgotten,\n    resetPassword\n};","import React from 'react'\n\ninterface IProps{\n    touched?: boolean,\n    message?: string\n}\n\n export const Error: React.FunctionComponent<IProps> = ({touched, message}) => {\n    if(touched === true ){\n        if(message){\n     return <div className=\"msg-error\">{message}</div>;\n    }\n    }\n    return <div>&nbsp;</div>;\n\n}\n","import * as Yup from 'yup'\n\nconst validEmail = Yup.string()\n.email(\"Must be a valid email address\")\n.max(255,\"Too long for an email\")\n.required(\"Email is required\");\n\nconst validPassword = Yup.string()\n.min(8,\"Password must have at least 8 caracters\")\n.max(255,\"Too long password\")\n.required(\"Password is required\");\n\nconst validConfirmationCode = Yup.number().\ntest('len',\"Confirmation code must be a 4 digits number\", t => t && t.toString().length === 4)\n.positive(\"Confirmation code must be positive\")\n.required(\"Confirmation code is required\");\n\nconst validUsername = Yup.string()\n.min(3,\"Username must have more than 3 caracters\")\n.max(50,\"Username must have less than 50 caracters\")\n.required(\"Username is required\");\n\nexport const loginValidationSchema = Yup.object().shape({\n    email: validEmail,\n    password: validPassword\n})\n\nexport const PassordForgottenValidationSchema = Yup.object().shape({\n    email: validEmail,\n    \n})\n\nexport const confirmationCodeFormSchema = Yup.object().shape(\n    {\n        confirmationCode: validConfirmationCode\n    }\n)\nexport const resetPasswordSchema = Yup.object().shape({\n    password1: validPassword,\n    password: Yup.string()\n    .oneOf([Yup.ref('password1'), null], 'Passwords must match')\n})\n\nexport const registrationSchema = Yup.object().shape({\n    username: validUsername,\n    email: validEmail,\n    password: validPassword\n\n})","import React, { Component } from \"react\";\nimport { Form, Button, Spinner, Alert } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope, faUser, faLock } from \"@fortawesome/free-solid-svg-icons\";\nimport { signin } from \"../../../store/Registration/actions\";\nimport { ICredentials } from \"../../../store/Registration/types\";\nimport { connect } from \"react-redux\";\nimport { ApplicationState } from \"../../../store\";\nimport { Formik } from \"formik\";\nimport { Error } from \"../../Error\";\nimport { registrationSchema } from \"../../../utilities/validationSchemas\";\ninterface ISignupProps {\n  signin: Function;\n}\n\ninterface ISignupStateProps {\n  isLoading: boolean;\n  error: string;\n}\n\ntype IProps = ISignupProps & ISignupStateProps;\n\nclass RegistrationPage extends Component<IProps> {\n  handleSubmit = (\n    values: { username: string; email: string; password: string },\n    {\n      setSubmitting,\n      resetForm\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    const user: ICredentials = {\n      email: values.email,\n      username: values.username,\n      password: values.password,\n      id: \"\"\n    };\n    this.props.signin(user);\n    setSubmitting(false);\n    resetForm();\n  };\n\n  render = () => {\n    return (\n      <div>\n\n      \n      <h4>Fill in the form to register</h4>\n      <Formik\n        initialValues={{ username: \"\", email: \"\", password: \"\" }}\n        onSubmit={this.handleSubmit}\n        validationSchema={registrationSchema}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting\n        }) => (\n          \n          <Form onSubmit={handleSubmit}>\n            {this.props.error && (\n              <Alert variant=\"danger\">{this.props.error}</Alert>\n            )}\n            <Form.Group className=\"mt-4\" controlId=\"formBasicText\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faUser} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 username\"\n                type=\"text\"\n                placeholder=\"Username\"\n                value={values.username}\n                onBlur={handleBlur}\n                onChange={handleChange}\n                name=\"username\"\n              />\n\n            <Error touched={touched.username} message={errors.username} />\n            </Form.Group>\n            <Form.Group className=\"mt-4\" controlId=\"formBasicEmail\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faEnvelope} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 email\"\n                type=\"email\"\n                placeholder=\"Email\"\n                value={values.email}\n                onBlur={handleBlur}\n                onChange={handleChange}\n                name=\"email\"\n              />\n              <Error touched={touched.email} message={errors.email} />\n            </Form.Group>\n            \n            <Form.Group className=\"mt-4\" controlId=\"formBasicPassword\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faLock} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 pwd\"\n                type=\"password\"\n                placeholder=\"Password\"\n                value={values.password}\n                onBlur={handleBlur}\n                onChange={handleChange}\n                name=\"password\"\n              />\n              <Error touched={touched.password} message={errors.password} />\n            </Form.Group>\n            \n            <Form.Group className=\"mt-4\" controlId=\"formBasicCheckbox\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Accept All terms & conditions\"\n              />\n            </Form.Group>\n            <Button\n              size=\"sm\"\n              className=\"mb-3 btn btn-primary btn-lg btn-block\"\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={this.props.isLoading}\n            >\n              {this.props.isLoading ? (\n                <span>\n                  <Spinner\n                    as=\"span\"\n                    animation=\"grow\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                  Loading...\n                </span>\n              ) : (\n                <span>Create account</span>\n              )}\n            </Button>\n            <br />\n            Or <a href=\"/login  \">get connected</a>\n          </Form>\n        )}\n      </Formik>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = ({ register }: ApplicationState) => ({\n  isLoading: register.isLoading,\n  error: register.error\n});\n\nconst mapActionsToProps = { signin };\n\nexport default connect(mapStateToProps, mapActionsToProps)(RegistrationPage);\n","\nimport { action } from 'typesafe-actions';\nimport { ICredentials,USER_SIGNUP,USER_SIGNUP_ERROR,USER_SIGNUP_SUCCESS, SignupActionsType } from './types'\nimport { history } from '../../utilities/history';\nimport { Dispatch } from 'redux';\nimport { userService } from '../../services/users.service'\n// user registration\n\n\nexport const userSignUp = (credentials: ICredentials): SignupActionsType => {\n   return action(\n    USER_SIGNUP,\n    credentials\n)}\n;\nexport const userSignUpSuccess = (successMsg: string): SignupActionsType => action(\n    USER_SIGNUP_SUCCESS,\n    successMsg\n);\nexport const userSignUpError = (errorMsg: string): SignupActionsType => action(\n    USER_SIGNUP_ERROR,\n    errorMsg\n);\nexport const signin = (user:ICredentials) => {\n    return (dispatch: Dispatch<SignupActionsType>) => {\n       \n        console.log('login Dispatched');\n        dispatch(userSignUp(user));\n        userService.signUp(user).then(\n            u => {\n                console.log('Login success dispatched');\n                console.log(u);\n                dispatch(userSignUpSuccess(u.data.message));\n                history.push('/login');\n            }\n        ).catch(err => {\n            console.log('sign up error dispatched');\n            console.log(err);\n            dispatch(userSignUpError('sign un unsucceeded'));\n        });\n\n        }\n}","export const USER_SIGNUP = 'USER_SIGNUP';\nexport const USER_SIGNUP_SUCCESS = 'USER_SIGNUP_SUCCESS';\nexport const USER_SIGNUP_ERROR = 'USER_SIGNUP_ERROR';\n\nexport interface ICredentials{\n    id: string,\n    username : string,\n    email : string,\n    password? : string,\n    image? : string,\n    age? : number\n}\n\n\ninterface UserSignupAction {\n    type: typeof USER_SIGNUP\n    payload: ICredentials\n}\n  \ninterface UserSignupSuccessAction {\n    type: typeof USER_SIGNUP_SUCCESS\n    payload: string\n}\n  \ninterface UserSignupErrorAction {\n    type: typeof USER_SIGNUP_ERROR\n    payload: string\n}\n  \n\nexport type  SignupActionsType = UserSignupAction | UserSignupSuccessAction | UserSignupErrorAction;\n\n\n\n","import React from 'react'\nimport Layout from './Layout'\nimport RegistrationForm from '../components/Registration/Form'\n\n\nconst Registration : React.SFC = () => (\n    <Layout>\n        <RegistrationForm/>\n    </Layout>\n);\n\n\nexport default Registration;\n","import React, { Component } from \"react\";\nimport { Form, Button, Row, Col, Spinner, Alert } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope, faLock } from \"@fortawesome/free-solid-svg-icons\";\nimport { login } from \"../../../store/Login/actions\";\nimport { connect } from \"react-redux\";\nimport { history } from \"../../../utilities/history\";\nimport { ApplicationState } from \"../../../store\";\nimport { Formik } from \"formik\";\nimport { Error } from \"../../Error\";\nimport { loginValidationSchema } from \"../../../utilities/validationSchemas\";\n\ninterface ILoginProps {\n  login: Function;\n}\n\ninterface ILoginStateProps {\n  userInfo: any;\n  isLoggedIn: boolean;\n  error: string;\n  isLoading: boolean;\n}\n\ntype IProps = ILoginProps & ILoginStateProps;\n\nclass LoginPage extends Component<IProps> {\n  handleSubmit = (\n    values: { email: string; password: string },\n    {\n      setSubmitting,\n      resetForm\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    this.props.login(values.email, values.password);\n    setSubmitting(false);\n    resetForm();\n  };\n\n  displayAlert = (error: string) => {\n    console.log(this.props.error);\n    return <Alert variant=\"danger\">{error}</Alert>;\n  };\n  render = () => {\n    if (this.props !== null && this.props.isLoggedIn === true) {\n      history.push(\"/profile\");\n    }\n\n    return (\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        validationSchema={loginValidationSchema}\n        onSubmit={this.handleSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            { this.props.error &&\n               this.displayAlert(this.props.error)\n            }\n            \n            <Form.Group className=\"mt-4\" controlId=\"formBasicEmail\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faEnvelope} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 email\"\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                placeholder=\"Email\"\n                value={values.email}\n              />\n              <Error touched={touched.email} message={errors.email} />\n            </Form.Group>\n            <Form.Group className=\"mt-4\" controlId=\"formBasicPassword\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faLock} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 pwd\"\n                type=\"password\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                name=\"password\"\n                placeholder=\"Password\"\n                value={values.password}\n              />\n              <Error touched={touched.password} message={errors.password} />\n            </Form.Group>\n            <Row>\n              <Col>\n                <Form.Group controlId=\"formBasicCheckbox\">\n                  <Form.Check type=\"checkbox\" label=\"Remember me\" />\n                </Form.Group>\n              </Col>\n              <Col>\n                <a href=\"/forgotten-password\" className=\"float-sm-right\">\n                  Forgot password\n                </a>\n              </Col>\n            </Row>\n            {this.props.isLoading ? (\n              <Button\n                size=\"sm\"\n                className=\"mb-3 btn btn-primary btn-lg btn-block\"\n                variant=\"primary\"\n                type=\"submit\"\n                disabled={this.props.isLoading}\n              >\n                <Spinner\n                  as=\"span\"\n                  animation=\"grow\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                Loading...\n              </Button>\n            ) : (\n              <Button\n                size=\"sm\"\n                className=\"mb-3 btn btn-primary btn-lg btn-block\"\n                variant=\"primary\"\n                type=\"submit\"\n                disabled={this.props.isLoading}\n              >\n                Login\n              </Button>\n            )}\n            <br />\n            Or <a href=\"/register\">Register now</a>\n          </Form>\n        )}\n      </Formik>\n    );\n  };\n}\n\nconst mapStateToProps = ({ login }: ApplicationState) => ({\n  userInfo: login.userInfo,\n  isLoggedIn: login.isLoggedIn,\n  error: login.error,\n  isLoading: login.isLoading\n});\n\nconst mapActionsToProps = { login };\n\nexport default connect(mapStateToProps, mapActionsToProps)(LoginPage);\n","import { action } from 'typesafe-actions';\nimport { ICredentials,USER_LOGIN,USER_LOGIN_ERROR,USER_LOGIN_SUCCESS,LoginActionsType } from './types'\nimport { history } from '../../utilities/history';\nimport { Dispatch } from 'redux';\nimport { userService } from '../../services/users.service'\nimport { userDetails } from '../types';\n\n\n// user login\nexport const userLogin = (credentials: ICredentials): LoginActionsType => {\n   return action(\n    USER_LOGIN,\n    credentials\n)}\n;\nexport const userLoginSuccess = (user: userDetails,token: string): LoginActionsType => action(\n    USER_LOGIN_SUCCESS,\n    {user,token}\n);\nexport const userLoginError = (errorMsg: string): LoginActionsType => action(\n    USER_LOGIN_ERROR,\n    errorMsg\n);\n\nexport const login = (email: string, password: string) => {\n    return (dispatch: Dispatch<LoginActionsType>) => {\n        const user: ICredentials = {\n            email,\n            password\n        }\n        console.log('login Dispatched');\n        dispatch(userLogin(user));\n        userService.login(email,password).then(\n            u => {\n                console.log('Login success dispatched');\n                console.log(u);\n                dispatch(userLoginSuccess({email: u.data.user.email,username: u.data.user.username,id: u.data.user.id},u.data.token));\n                history.push('/profile');\n            }\n        ).catch(err => {\n            console.log('login error dispatched');\n            console.log(err);\n            dispatch(userLoginError('Login was unsucceeded'));\n        });\n\n        }\n}","import { userDetails } from \"../types\";\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\nexport const USER_LOGIN_ERROR = 'USER_LOGIN_ERROR';\n\nexport interface ICredentials{\n    email: string,\n    password: string\n}\n\n\ninterface UserLoginAction {\n    type: typeof USER_LOGIN\n}\n  \ninterface UserLoginSuccessAction {\n    type: typeof USER_LOGIN_SUCCESS\n    payload: {user: userDetails,token: string}\n}\n  \ninterface UserLoginErrorAction {\n    type: typeof USER_LOGIN_ERROR\n    payload: string\n}\n  \n\nexport type  LoginActionsType = UserLoginAction | UserLoginSuccessAction | UserLoginErrorAction;\n\n\n\n","import React from 'react'\nimport Layout from './Layout'\nimport LoginForm from '../components/Login/Form'\n\n\nconst Login : React.SFC = () => (\n    <Layout>\n        <LoginForm/>\n    </Layout>\n);\n\n\nexport default Login;\n","import { action } from 'typesafe-actions';\nimport { PASSWORD_FORGOTTEN,PASSWORD_FORGOTTEN_ERROR,PASSWORD_FORGOTTEN_SUCCESS,PasswordForgottenActionsType } from './types'\nimport { Dispatch } from 'redux';\nimport { userService } from '../../services/users.service'\nimport { history } from '../../utilities/history';\n\n// user login\nexport const PasswordForgotten = (email: string): PasswordForgottenActionsType => {\n \n   return action(\n    PASSWORD_FORGOTTEN,\n    email\n)};\n\nexport const PasswordForgottenSuccess = (successMessage: string,confirmationCode: string = ''): PasswordForgottenActionsType => action(\n    PASSWORD_FORGOTTEN_SUCCESS,\n    {\n        successMessage,\n        confirmationCode\n    }\n    \n);\nexport const PasswordForgottenError = (errorMsg: string): PasswordForgottenActionsType => action(\n    PASSWORD_FORGOTTEN_ERROR,\n    errorMsg,\n);\nexport const passwordForgotten = (email: string,confirmationCode: string = '') => {\n   \n    return (dispatch: Dispatch<PasswordForgottenActionsType>) => {\n        console.log('login Dispatched');\n        dispatch(PasswordForgotten(email));\n        userService.passwordForgotten(email,confirmationCode).then(\n            u => {\n                console.log('received data');\n                console.log(u.data);\n                if(u.data.match === false) dispatch(PasswordForgottenError('Wrong Confirmation code'));\n                else if(u.data.match === true) {\n                    dispatch(PasswordForgottenSuccess(u.data.message,confirmationCode));\n                    history.push('reset-password');\n                    }\n                else {\n                     dispatch(PasswordForgottenSuccess(u.data.message));\n                     history.push('confirmation-form');\n                }\n               \n            }\n        ).catch(err => {\n            dispatch(PasswordForgottenError('Something went wrong'));\n        });\n    }\n}","export const PASSWORD_FORGOTTEN = 'PASSWORD_FORGOTTEN';\nexport const PASSWORD_FORGOTTEN_SUCCESS = 'PASSWORD_FORGOTTEN_SUCCESS';\nexport const PASSWORD_FORGOTTEN_ERROR = 'PASSWORD_FORGOTTEN_ERROR';\n\nexport interface ICredentials{\n    email: string,\n    confirmationCode?: number\n}\n\ninterface PasswordForgottenAction {\n    type: typeof PASSWORD_FORGOTTEN\n    payload: string\n}\n  \ninterface PasswordForgottenSuccessAction {\n    type: typeof PASSWORD_FORGOTTEN_SUCCESS\n    payload: {\n        successMessage: string,\n        confirmationCode: string\n    }\n}\n  \ninterface PasswordForgottenErrorAction {\n    type: typeof PASSWORD_FORGOTTEN_ERROR\n    payload: string\n}\n  \n\nexport type  PasswordForgottenActionsType = PasswordForgottenAction | PasswordForgottenSuccessAction | PasswordForgottenErrorAction;\n\n\n\n","import React, { Component } from \"react\";\nimport { Form, Button, Alert, Spinner } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEnvelope } from \"@fortawesome/free-solid-svg-icons\";\nimport { ApplicationState } from \"../../../store\";\nimport { connect } from \"react-redux\";\nimport { passwordForgotten } from \"../../../store/PasswordForgotten/actions\";\nimport { Formik } from \"formik\";\nimport { PassordForgottenValidationSchema } from \"../../../utilities/validationSchemas\";\nimport { Error } from \"../../Error\";\n\ninterface IPFProps {\n  passwordForgotten: Function;\n}\n\ninterface IPFStateProps {\n  email: string;\n  isLoggedIn: boolean;\n  successMessage: string;\n  isLoading: boolean;\n  error: string;\n}\n\ntype IProps = IPFProps & IPFStateProps;\n\nclass PasswordForgotten extends Component<IProps> {\n  handleSubmit = (\n    values: { email: string },\n    {\n      setSubmitting,\n      resetForm\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    this.props.passwordForgotten(values.email);\n    setSubmitting(false);\n    resetForm();\n  };\n\n  render = () => {\n    const result = (\n      <Formik\n        initialValues={{ email: \"\" }}\n        validationSchema={PassordForgottenValidationSchema}\n        onSubmit={this.handleSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            <div>\n              {\n                this.props.error && <Alert variant=\"danger\">{this.props.error}</Alert>\n              }\n               {\n                this.props.successMessage && <Alert variant=\"success\">{this.props.successMessage}</Alert>\n              }\n              <Form.Group className=\"mt-4\" controlId=\"formBasicEmail\">\n                <span className=\"pl-3 pt-1 position-absolute\">\n                  <FontAwesomeIcon icon={faEnvelope} />\n                </span>\n                <Form.Control\n                  size=\"sm\"\n                  className=\"pl-5 email\"\n                  type=\"email\"\n                  name=\"email\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.email}\n                  placeholder=\"Email\"\n                />\n                <Error touched={touched.email} message={errors.email} />\n              </Form.Group>\n              \n            </div>\n            <Button\n              size=\"sm\"\n              className=\"mb-3 btn btn-primary btn-lg btn-block\"\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={this.props.isLoading}\n            >\n              {this.props.isLoading ? (\n                <span>\n                  <Spinner\n                    as=\"span\"\n                    animation=\"grow\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                  Loading...\n                </span>\n              ) : (\n                <span>Recover password</span>\n              )}\n            </Button>\n            <br />\n            Or <a href=\"/login\">Back to login!</a>\n          </Form>\n        )}\n      </Formik>\n    );\n    return result;\n  };\n}\n\nconst mapStateToProps = ({ login, passwordForgotten }: ApplicationState) => ({\n  isLoggedIn: login.isLoggedIn,\n  successMessage: passwordForgotten.successMessage,\n  isLoading: passwordForgotten.isLoading,\n  error: passwordForgotten.error,\n  email: passwordForgotten.email\n});\n\nconst mapDispatchToProps = { passwordForgotten };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordForgotten);\n","import React from 'react';\nimport PasswordForgottenForm from '../components/PasswordForgotten/Form';\nimport Layout from './Layout';\n\n\n\nconst PasswordForgotten : React.SFC = () => (\n    <Layout>\n        <PasswordForgottenForm />\n    </Layout>\n);\n\n\nexport default PasswordForgotten;","import React, { Component } from \"react\";\nimport { Form, Button, Spinner, Alert } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLock } from \"@fortawesome/free-solid-svg-icons\";\nimport { resetPassword } from \"../../../store/ResetPassword/actions\";\nimport { ApplicationState } from \"../../../store\";\nimport { connect } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport { Error } from \"../../Error\";\nimport { resetPasswordSchema } from \"../../../utilities/validationSchemas\";\n\ninterface IResetPasswordProps {\n  resetPassword: Function;\n}\ninterface IResetPasswordStateProps {\n  isLoading: boolean;\n  error: string;\n  successMessage: string;\n  email: string;\n  confirmationCode: string;\n}\n\ntype IProps = IResetPasswordProps & IResetPasswordStateProps;\n\nclass ResetPassword extends Component<IProps> {\n  handleSubmit = (\n    values: { password1: string; password: string },\n    {\n      setSubmitting,\n      resetForm\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    this.props.resetPassword(\n      this.props.email,\n      this.props.confirmationCode,\n      values.password\n    );\n    setSubmitting(false);\n    resetForm();\n  };\n\n  render = () => {\n    return (\n      <Formik\n        initialValues={{ password1: \"\", password: \"\" }}\n        onSubmit={this.handleSubmit}\n        validationSchema={resetPasswordSchema}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            {this.props.error && (\n              <Alert variant=\"danger\">{this.props.error}</Alert>\n            )}\n            {this.props.successMessage && (\n              <Alert variant=\"success\">{this.props.successMessage}</Alert>\n            )}\n            <Form.Group className=\"mt-4\" controlId=\"formBasicPassword\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faLock} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password1\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.password1}\n              />\n              <Error touched={touched.password1} message={errors.password1} />\n            </Form.Group>\n\n            <Form.Group className=\"mt-4\" controlId=\"formBasicPassword\">\n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faLock} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5\"\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                value={values.password}\n                onBlur={handleBlur}\n                onChange={handleChange}\n              />\n              <Error touched={touched.password} message={errors.password} />\n            </Form.Group>\n            <Button\n              size=\"sm\"\n              className=\"mb-3 btn btn-primary btn-lg btn-block\"\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={this.props.isLoading}\n            >\n              {this.props.isLoading ? (\n                <span>\n                  <Spinner\n                    as=\"span\"\n                    animation=\"grow\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                  Loading...\n                </span>\n              ) : (\n                <span>Reset password</span>\n              )}\n              \n            </Button>\n            <br />\n            {\n                this.props.successMessage &&  \n                <a href=\"/login\">Back to login!</a>\n            }\n          </Form>\n        )}\n      </Formik>\n    );\n  };\n}\n\nconst mapStateToProps = ({\n  passwordForgotten,\n  resetPassword\n}: ApplicationState) => ({\n  isLoading: resetPassword.isLoading,\n  error: resetPassword.error,\n  successMessage: resetPassword.successMessage,\n  email: passwordForgotten.email,\n  confirmationCode: passwordForgotten.confirmationCode\n});\n\nconst mapActionsToProps = {\n  resetPassword\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(ResetPassword);\n","import { action } from 'typesafe-actions';\nimport { PWD_RESET_ERROR,USER_PWD_RESET,PwdResetActionsType,PWD_RESET_SUCCESS } from './types'\nimport { Dispatch } from 'redux';\nimport { userService } from '../../services/users.service';\n// change password \n\nexport const ChangePassword = () : PwdResetActionsType => action(\n    USER_PWD_RESET\n);\n\n\nexport const ChangePasswordSuccess = (successMessage: string): PwdResetActionsType => action(\n    PWD_RESET_SUCCESS,\n    successMessage\n);\n\n\nexport const ChangePasswordError = (error: string): PwdResetActionsType => action(\n    PWD_RESET_ERROR,\n    error\n);\n\n\n\nexport const resetPassword = (email: string,confirmationCode: string, password: string) => {\n   \n    return (dispatch: Dispatch<PwdResetActionsType>) => {\n        console.log('login Dispatched');\n        dispatch(ChangePassword());\n        userService.resetPassword(email,confirmationCode,password).then(\n            u => {\n                dispatch(ChangePasswordSuccess(u.data.message));\n            }\n        ).catch(err => {\n            dispatch(ChangePasswordError('Something went wrong'));\n        });\n    }\n}","export const USER_PWD_RESET = 'USER_PWD_RESET';\nexport const PWD_RESET_SUCCESS = 'PWD_RESET_SUCCESS';\nexport const PWD_RESET_ERROR = 'PWD_RESET_ERROR';\n\ninterface PwdResetAction {\n    type: typeof USER_PWD_RESET\n}\n  \ninterface PwdResetSuccessAction {\n    type: typeof PWD_RESET_SUCCESS\n    payload: string\n}\n  \ninterface PwdResetErrorAction {\n    type: typeof PWD_RESET_ERROR\n    payload: string\n}\n  \n\nexport type  PwdResetActionsType = PwdResetAction | PwdResetSuccessAction | PwdResetErrorAction;\n\n\n\n","import React from 'react'\nimport Layout from './Layout'\nimport ResetPasswordForm from '../components/RessetPassword/Form'\n\n\nconst ResetPassword : React.SFC = () => (\n    <Layout>\n        <ResetPasswordForm />\n    </Layout>\n);\n\n\nexport default ResetPassword;\n","import React, { Component } from \"react\";\nimport { Form, Button, Alert, Spinner } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {  faKey } from \"@fortawesome/free-solid-svg-icons\";\nimport { ApplicationState } from \"../../../store\";\nimport { connect } from \"react-redux\";\nimport { passwordForgotten } from \"../../../store/PasswordForgotten/actions\";\nimport { Formik } from \"formik\";\nimport { confirmationCodeFormSchema } from \"../../../utilities/validationSchemas\";\nimport { Error } from '../../Error'\n\ninterface IPFProps {\n  passwordForgotten: Function;\n}\n\ninterface IPFStateProps {\n  email: string;\n  isLoggedIn: boolean;\n  successMessage: string;\n  isLoading: boolean;\n  error: string;\n}\n\ntype IProps = IPFProps & IPFStateProps;\n\nclass ConfirmationForm extends Component<IProps> {\n \n  handleSubmit = (\n    values: { confirmationCode: string;},\n    {\n      setSubmitting,\n      resetForm\n    }: { setSubmitting: Function; resetForm: Function }\n  ) => {\n    setSubmitting(true);\n    this.props.passwordForgotten(this.props.email,values.confirmationCode);\n    setSubmitting(false);\n    resetForm();\n  };\n  render = () => {\n    const result = (\n      <Formik\n        initialValues={{ confirmationCode: '' }}\n        validationSchema={confirmationCodeFormSchema}\n        onSubmit={this.handleSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting\n        }) => (\n          <Form onSubmit={handleSubmit}>\n            {\n              this.props.error && <Alert variant=\"danger\">{this.props.error}</Alert>\n            }\n            \n            <Form.Group className=\"mt-4\" controlId=\"formBasicEmail\">\n             \n              <span className=\"pl-3 pt-1 position-absolute\">\n                <FontAwesomeIcon icon={faKey} />\n              </span>\n              <Form.Control\n                size=\"sm\"\n                className=\"pl-5 confirmCode\"\n                type=\"text\"\n                onChange={handleChange}\n                onBlur={handleBlur} \n                value={values.confirmationCode}\n                name=\"confirmationCode\"\n                placeholder=\"Confirmation code\"\n              />\n              <Error touched={touched.confirmationCode} message={errors.confirmationCode} />\n            </Form.Group>\n            <Button\n              size=\"sm\"\n              className=\"mb-3 btn btn-primary btn-lg btn-block\"\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={this.props.isLoading}\n            >\n              {this.props.isLoading ? (\n                <span>\n                  <Spinner\n                    as=\"span\"\n                    animation=\"grow\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                  />\n                  Loading...\n                </span>\n              ) : (\n                <span>Recover password</span>\n              )}\n            </Button>\n            <br />\n            Or <a href=\"/login\">Back to login!</a>\n          </Form>\n        )}\n      </Formik>\n    );\n    return result;\n  };\n}\n\nconst mapStateToProps = ({ login, passwordForgotten }: ApplicationState) => ({\n  isLoggedIn: login.isLoggedIn,\n  successMessage: passwordForgotten.successMessage,\n  isLoading: passwordForgotten.isLoading,\n  error: passwordForgotten.error,\n  email: passwordForgotten.email\n});\n\nconst mapDispatchToProps = { passwordForgotten };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmationForm);\n","import React from 'react';\nimport ConfirmationForm from '../components/PasswordForgotten/Form/confirmationForm';\nimport Layout from './Layout';\n\n\n\nconst ConfirmationFormPage : React.SFC = () => (\n    <Layout>\n        <ConfirmationForm />\n    </Layout>\n);\n\n\nexport default ConfirmationFormPage;","import { isNil, isObject, some, keys } from 'lodash'\nimport { Action } from 'redux';\n\nexport function createReducer(_state: any, handlers: Record<string, Function>) {\n  // initial state is required\n  if (_state === undefined) {\n      throw new Error('initial state is required')\n  }\n\n  // handlers must be an object\n  if (isNil(handlers) || !isObject(handlers)) {\n      throw new Error('handlers must be an object')\n  }\n\n  // handlers cannot have an undefined key\n  if (some(keys(handlers), (key) => isNil(key))) {\n      throw new Error('handlers cannot have an undefined key')\n  }\n\n  const customReducer = (state = _state, action: Action) => {\n      let { type }  = action;\n      const handler = !isNil(handlers[type]) ? handlers[type] : null;\n\n      if (isNil(handler))\n          return {...state};\n\n      return handler(state, action);\n  };\n\n  return customReducer;\n}","import { Reducer, AnyAction } from \"redux\";\nimport {loginState} from '../types';\nimport { USER_LOGIN, USER_LOGIN_ERROR,USER_LOGIN_SUCCESS} from './types';\nimport { createReducer} from '../../utilities/ReducerHelper';\n\nconst initialState: loginState = {\n    userInfo: {\n        email: '',\n        id: '',\n        username: ''\n    },\n    error: '',\n    isLoggedIn: false,\n    token: '',\n    isLoading: false\n}\n\n//Login\nconst doLogin = (state = initialState, action: AnyAction) => {\n    return {...state,isLoading: true};\n}\n\nconst loginSuccess = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoggedIn: true, userInfo: action.payload.user,token: action.payload.token, isLoading: false, error: '' };\n}\n\nconst loginFailed = (state = initialState, action: AnyAction) => {\n    console.log('action');\n    console.log(action);\n    return { ...state, isLoggedIn: false, error: action.payload, isLoading: false };\n}\n\nconst LOGIN_HANDLERS = {\n    [USER_LOGIN]: doLogin,\n    [USER_LOGIN_SUCCESS]: loginSuccess,\n    [USER_LOGIN_ERROR]: loginFailed,\n}\n\n\n\nconst LoginReducer: Reducer<loginState> = createReducer(initialState, LOGIN_HANDLERS);\nexport { LoginReducer };","import { Reducer, AnyAction } from \"redux\";\nimport {PasswordForgottenState} from '../types'\nimport { PASSWORD_FORGOTTEN,PASSWORD_FORGOTTEN_ERROR,PASSWORD_FORGOTTEN_SUCCESS} from './types'\nimport { createReducer} from '../../utilities/ReducerHelper'\nconst initialState: PasswordForgottenState = {\n    email: '',\n    successMessage: '',\n    isLoading: false,\n    error: '',\n    confirmationCode: '',\n}\n\n//Login\nconst passwordForgotten = (state = initialState, action: AnyAction) => {\n    return {...state, isLoading: true, email: action.payload};\n}\n\nconst passwordForgottenSuccess = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoading: false, successMessage: action.payload.successMessage, confirmationCode: action.payload.confirmationCode, error: ''};\n}\n\nconst passwordForgottenFailed = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoading: false, error: action.payload, successMessage: '' };\n}\n\nconst PQSSWORD_FORGOTTEN_HANDLERS = {\n    [PASSWORD_FORGOTTEN]: passwordForgotten,\n    [PASSWORD_FORGOTTEN_SUCCESS]: passwordForgottenSuccess,\n    [PASSWORD_FORGOTTEN_ERROR]: passwordForgottenFailed,\n}\n\n\n\nconst PasswordForgottenReducer: Reducer<PasswordForgottenState> = createReducer(initialState, PQSSWORD_FORGOTTEN_HANDLERS);\nexport { PasswordForgottenReducer };","import { Reducer, AnyAction } from \"redux\";\nimport { registerState } from '../types'\nimport { USER_SIGNUP, USER_SIGNUP_ERROR, USER_SIGNUP_SUCCESS} from './types'\nimport { createReducer} from '../../utilities/ReducerHelper'\n\nconst initialState: registerState = {\n    isLoading: false,\n    error: ''\n   \n}\n// Register\n\nconst doRegister = (state = initialState, action: AnyAction) => {\n    return {...state,isLoading: true};\n}\n\nconst registerSuccess = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoading: false };\n}\n\nconst registerFailed = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoading: false, error: action.payload };\n}\n\nconst REGISTER_HANDLERS = {\n    [USER_SIGNUP]: doRegister,\n    [USER_SIGNUP_SUCCESS]: registerSuccess,\n    [USER_SIGNUP_ERROR]: registerFailed,\n}\n\n// \n\n\nconst SignupReducer: Reducer<registerState> = createReducer(initialState, REGISTER_HANDLERS);\nexport {  SignupReducer  };","import { Reducer, AnyAction } from \"redux\";\nimport { PWD_RESET_ERROR,PWD_RESET_SUCCESS,USER_PWD_RESET} from './types';\nimport { createReducer} from '../../utilities/ReducerHelper';\nimport { PasswordResetState } from '../types'\n\nconst initialState: PasswordResetState = {\n    isLoading: false,\n    error: '',\n    successMessage: ''\n}\n\nconst doPasswordReset = (state = initialState, action: AnyAction) => {\n    return {...state,isLoading: true };\n}\n\nconst passwordResetSuccess = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoading: false, successMessage: action.payload,error: '' };\n}\n\nconst passwordResetFailed = (state = initialState, action: AnyAction) => {\n    return { ...state, isLoading: false, error: action.payload, successMessage: '' };\n}\n\nconst PWDCHANGE_HANDLERS = {\n    [USER_PWD_RESET]: doPasswordReset,\n    [PWD_RESET_SUCCESS]: passwordResetSuccess,\n    [PWD_RESET_ERROR]: passwordResetFailed,\n}\n\n\n\n\n\nconst resetPasswordReducer: Reducer<PasswordResetState> = createReducer(initialState, PWDCHANGE_HANDLERS);\nexport { resetPasswordReducer };","import { Store, createStore, applyMiddleware } from \"redux\";\nimport { ApplicationState, RootReducer } from \"./store\";\nimport { History } from 'history';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport { LoginActionsType } from \"./store/Login/types\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { LoadState,SaveState } from './utilities/localStorage';\n\nexport const configureStore = (history: History): Store<ApplicationState> => {\n    let initialState: ApplicationState = {\n        login: {\n            error: '',\n            isLoggedIn: false,\n            token: '',\n            userInfo:{\n                email: '',\n                id: '',\n                username: ''\n            },\n            isLoading: false\n        },\n        register:{\n            isLoading: false,\n            error: ''\n        },\n        passwordForgotten:{\n            confirmationCode: '',\n            email: '',\n            error: '',\n            isLoading: false,\n            successMessage: ''\n        },\n        resetPassword: {\n            error: '',\n            successMessage: '',\n            isLoading: false\n        }\n    };\n    let savedState = LoadState();\n    if(savedState === undefined ) savedState = initialState;\n    const store =  createStore(\n        RootReducer(history),\n        savedState,composeWithDevTools(\n        applyMiddleware(thunk as ThunkMiddleware<ApplicationState,LoginActionsType>)),\n        \n    );\n\n    store.subscribe(() => {\n        SaveState(store.getState());\n    });\n\n\n    return store;\n}","\nexport const LoadState = () => {\n    try {\n        \n        const serializedState = localStorage.getItem('store');\n        if(serializedState === null) return undefined;\n        return JSON.parse(serializedState);\n    }\n    catch(err ){\n        return undefined;\n    }\n}\n\nexport const SaveState = (state: any) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('store',serializedState);\n    }\n    catch(err ){\n        // ignore error\n    }\n}","import { loginState, registerState, PasswordForgottenState, PasswordResetState } from \"./types\";\nimport { combineReducers } from \"redux\";\nimport { LoginReducer } from \"./Login/reducer\";\nimport { PasswordForgottenReducer } from \"./PasswordForgotten/reducer\";\nimport { SignupReducer } from \"./Registration/reducer\";\nimport { resetPasswordReducer } from \"./ResetPassword/reducer\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History } from \"history\";\n\n\nexport interface ApplicationState {\n    login: loginState,\n    register: registerState,\n    passwordForgotten: PasswordForgottenState,\n    resetPassword: PasswordResetState\n}\n\nexport const RootReducer = (history: History) => combineReducers({\n    login: LoginReducer,\n    register: SignupReducer,\n    passwordForgotten: PasswordForgottenReducer,\n    resetPassword: resetPasswordReducer,\n    router: connectRouter(history),\n});","import React from 'react'\nimport { Container } from 'react-bootstrap'\n\nconst Profile  : React.FC = () => {\n    return (\n        <div>\n            <Container>\n\n            <h1>Hello this is your profile</h1>\n            </Container>\n        </div>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport Registration from './pages/Registration';\nimport Login from './pages/Login';\nimport ForgottenPassord from './pages/PasswordForgotten';\nimport ResetPassword from './pages/ResetPassword';\nimport ConfirmationFormPage from './pages/confirmationFormPage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Router,Route } from 'react-router-dom';\nimport { history } from './utilities/history';\nimport { configureStore } from './configureStore';\nimport { Provider } from 'react-redux';\nimport { Store } from 'redux';\nimport { ApplicationState } from './store';\nimport Profile from './components/Profile/profile';\n\nconst App: React.FC = () => {\n  \n\n  const store: Store<ApplicationState> = configureStore(history);\n  \n  return (\n    <Provider store={store}>\n\n        <div className=\"App\">\n          <Router history={history}>\n    \n            <Route path=\"/\" exact component={Login} />\n            <Route path=\"/login\" exact component={Login} />\n            <Route path=\"/register/\" component={Registration} />\n            <Route path=\"/forgotten-password\" component={ForgottenPassord} />\n            <Route path=\"/reset-password\" component={ResetPassword} />\n            <Route path=\"/confirmation-form\" component={ConfirmationFormPage} />\n            <Route path=\"/profile\" component={Profile} />\n\n        </Router>\n            \n        </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}